#include<bits/stdc++.h>
using namespace std;
#define int int64_t

vector<int> split(string &s, char d = ' ')
{
    string deliminiter = "\\";
    deliminiter += d;
    regex _del(deliminiter);
    vector<string> temp(sregex_token_iterator(s.begin() , s.end() , _del , -1) , sregex_token_iterator());
    int n = temp.size();
    vector<int> a(n);
    for(int i=0 ; i<n ; i++)
      a[i] = stoi(temp[i]);
   return a;
}

int32_t main()
{
   ios_base::sync_with_stdio(0),cin.tie(0);
   int n;   cin>>n;
   vector<int> a(n);
   for(auto &i:a) 
      cin>>i;


   // string s = "582 5 107 342 332 253 191 999 3 285 361 987 836 530 2 481 316 447 707 541 956 843 86 352 649 526 962 582 53 136 715 495 748 651 719 606 32 148 386 733 798 102 907 199 751 934 141 29 568 864 951 970 394 89 396 983 242 531 452 935 178 908 353 356 614 487 995 800 240 617 469 917 85 133 677 366 758 777 744 716 400 831 715 41 140 773 267 144 624 389 222 707 139 805 424 396 197 816 103 509 653 828 400 279 865 50 232 967 18 482 635 988 101 804 712 507 995 639 106 435 673 798 569 673 17 197 887 806 944 89 572 916 334 822 267 28 329 750 954 706 514 417 974 183 590 927 924 23 398 456 921 577 767 796 380 562 915 987 775 650 943 223 881 573 403 325 46 883 997 392 133 808 422 486 9 725 483 481 729 893 773 70 505 257 289 473 583 412 497 856 582 456 386 36 374 752 812 819 434 892 389 320 896 120 790 369 957 788 356 800 399 429 16 652 169 171 48 693 522 409 124 83 926 305 849 39 987 405 602 911 806 223 570 367 588 322 611 339 729 558 706 190 468 120 120 911 249 255 427 918 566 672 387 451 310 388 285 352 593 589 715 898 858 252 939 684 144 774 788 731 925 578 540 699 10 845 988 872 353 494 410 158 802 338 14 467 6 193 765 559 695 511 626 907 30 988 896 447 76 132 361 729 946 736 218 989 248 348 324 16 986 103 549 500 598 853 869 328 223 696 417 765 149 227 260 410 683 118 825 712 648 885 274 94 591 145 644 398 38 949 105 334 434 554 436 833 890 531 864 948 320 74 418 777 564 809 218 815 632 658 223 767 604 928 32 617 539 220 563 797 101 344 913 363 180 407 920 379 135 515 848 973 89 414 591 635 146 898 53 826 685 881 984 245 961 517 593 826 361 897 62 450 100 638 934 309 285 975 240 300 275 846 372 822 570 596 472 667 369 405 364 252 459 305 190 809 726 789 664 241 534 1000 781 982 955 246 679 454 566 249 908 603 856 898 188 716 396 996 165 506 248 650 503 420 744 972 921 35 99 519 906 967 868 409 800 456 258 505 813 61 88 125 836 769 22 937 105 881 950 303 439 655 176 610 31 322 342 578 39 460 777 939 737 26 698 29 520 568 513 693 998 738 18 467 113 900 587 186 217 324 496 604 444 122 55 163 587 670 364 113 682 890 678 745 875 812 104 155 228 854 849 892 36 118 93 972 90 998 449 358 598 437 234 819 902 316 943 15 659 841 915 739 225 679 748 425 627 637 879 307 212 339 601 589 638 136 23 206 879 302 183 547 432 356 293 12 693 123 279 717 903 538 65 967 221 147 762 332 158 771 197 262 128 541 730 880 461 888 522 724 1 581 878 819 813 954 496 568 415 761 752 414 640 385 808 493 428 940 993 809 429 736 44 411 833 295 178 102 592 750 357 403 934 9 420 181 999 366 611 846 614 965 592 105 452 167 824 341 760 756 144 536 617 355 92 658 510 358 771 798 142 491 200 580 488 236 539 546 813 120 46 950 265 560 393 270 773 659 7 848 824 354 463 258 841 636 851 27 543 499 868 1000 314 822 52 104 879 613 146 352 359 856 290 177 288 569 930 741 19 508 511 21 772 846 190 974 774 196 531 503 132 479 261 732 201 895 64 102 249 205 122 505 726 591 166 973 460 391 460 230 364 821 383 988 565 49 989 884 638 897 147 508 846 745 351 883 693 78 580 615 952 746 553 964 960 980 490 44 891 645 70 722 634 387 663 830 466 105 477 372 891 133 795 564 348 714 888 404 733 756 1000 105 835 854 441 362 743 519 286 685 463 216 303 432 44 40 727 65 483 576 277 366 756 272 516 639 470 80 234 55 153 280 101 334 618 184 473 985 898 200 739 137 992 602 938 584 50 515 168 519 8 598 581 307 250 616 900 851 884 621 405 788 161 330 353 453 493 785 641 323 42 32 256 750 812 186 996 386 317 140 513 192 74 225 318 434 347 231 453 66 975 240 327 756 486 562 166 463 701 575 610 215 294 630 765 486 637 720 567 711 900 371 346 930 375 683 726 595 9 804 263 443 398 169 194 253 391 281 244 794 9 796 339 998 814 418 930 64 258 708 914 270 839 537 475 71 778 83 943 391 163 919 432 422 921 945 685 817 44 397 641 544 825 31 452 902 274 484 376 885 107 263 797 639 910 13 461 686 448 321 169 157 170 225 586 372 880 871 232 264 805 872 415 480 214 320 693 425 90 365 206 36 649 488 184 635 898 207 559 239 986 766 626 845 492 617 116 124 788 499 556 768 235 114 341 522 894 48 711 303 519 820 228 156 666 175 500 48 601 288 897 395 545 416 100 647 579 143 990 230 492 453 592 955 933 65 931 775 979 886 297 630 760 25 42 904 888 412 632 288 669 918 732 24 412 777 302 411 598 155 57 82 944 933 52 952 323 175 370 118 548 738 123 64 69 804 617 477 779 960 412 451 646 387 222 768 428 152 352 450 269 685 451 49 560 468 672 831 805 507 705 527 186 236 925 579 487 902 792 101 953 506 656 535 410 887 481 474 79 662 498 603 129 6 750 353 405 833 684 225 500 694 872 786 564 629 280 706 564 718 599 231 444 890 245 214 147 272 844 359 455 746 733 254 153 781 186 132 542 197 337 397 351 750 127 880 322 124 450 122 830 276 406 387 579 97 354 79 112 808 384 734 627 132 848 796 837 578 229 394 387 358 734 915 246 117 623 984 716 537 678 405 565 768 934 281 798 525 599 706 17 678 108 335 163 700 451 268 365 950 209 905 108 406 484 587 634 914 495 162 674 196 545 713 767 795 670 418 342 352 596 743 175 202 912 946 488 130 735 990 882 720 501 11 554 516 601 966 913 325 551 710 37 806 76 769 526 852 406 173 457 857 922 71 329 604 748 727 225 527 330 818 771 1000 649 959 180 800 815 451 389 215 775 781 628 806 128 986 57 547 910 858 225 209 64 969 487 109 512 271 366 290 558 840 296 318 670 293 706 691 973 994 901 751 999 838 391 140 180 710 104 200 103 129 518 54 174 221 609 84 293 825 655 219 443 625 521 99 754 502 140 292 155 443 298 653 424 441 702 296 977 715 460 996 928 379 670 770 572 867 176 257 194 229 653 27 47 812 679 357 543 961 659 707 42 431 810 217 897 574 570 67 429 60 411 414 513 751 299 557 691 652 114 517 775 100 631 681 500 129 817 14 829 182 286 80 752 652 751 796 339 126 746 212 634 222 79 550 522 749 500 973 786 871 841 982 708 468 997 973 377 529 31 302 202 245 701 172 711 948 841 813 84 112 622 691 639 483 840 117 868 789 49 516 929 148 349 62 778 399 423 503 230 459 689 675 40 398 217 197 519 847 870 484 94 196 607 80 869 841 204 257 110 512 323 433 24 708 324 533 776 293 462 215 179 79 344 983 430 378 584 797 630 547 712 521 296 250 587 708 386 27 733 428 432 213 161 476 288 925 720 1 38 788 504 46 649 253 467 185 468 168 964 436 422 922 518 429 770 955 156 614 248 78 362 813 938 332 555 389 544 577 600 116 525 118 807 763 7 861 954 97 938 297 964 592 14 971 8 958 933 885 594 310 814 796 467 853 149 582 825 301 976 896 52 477 187 242 571 390 893 144 61 328 585 123 25 523 54 862 94 431 776 539 467 196 516 851 432 66 624 737 379 451 385 672 333 76 490 536 370 288 188 621 981 524 920 944 489 180 839 964 897 957 427 618 385 857 315 934 770 190 267 295 730 719 681 299 874 377 49 752 790 455 154 852 729 935 831 543 974 659 816 164 800 217 166 187 867 740 458 210 768 408 846 759 517 841 930 800 619 421 761 795 318 941 121 958 593 481 391 48 999 145 633 910 923 452 314 903 153 589 921 353 578 537 50 458 868 474 131 591 184 7 72 600 395 170 625 794 941 800 775 708 805 333 50 498 266 125 781 541 891 572 48 817 713 943 918 110 776 649 333 904 770 631 168 351 723 652 736 256 590 382 207 537 158 583 315 505 366 605 41 734 178 322 576 917 524 964 786 157 96 886 390 612 351 438 345 361 216 333 224 64 739 594 495 225 708 223 573 946 710 698 406 384 309 334 88 298 539 639 446 766 884 186 720 458 729 610 161 804 649 532 768 538 356 348 631 36 622 766 367 77 522 374 658 341 708 352 648 514 550 721 635 706 124 163 994 722 328 333 378 122 998 593 864 655 545 37 48 720 533 594 186 978 226 784 799 476 632 920 904 251 861 64 208 199";
   // vector<int> a = split(s);
   // int n = a.size();

   int mi = *min_element(a.begin() , a.end());
   for(auto &i : a)  i-=mi;
   int mx = *max_element(a.begin() , a.end());
   mi = 0;
   
   // int dp[n][mx+1] = {};
   vector<vector<int>> dp(n , vector<int>(mx+1));

   // dp[i][j] represents the min cost to make array sorted such that the ith max_element
   // is j

   for(int j=0 ; j<=mx ; j++)
      dp[0][j] = abs(a[0] - j);

   
   for(int i = 1 ; i<n ; i++)
   {
      mi = 1e9+5;
      for(int j = 0 ; j<= mx ; j++)
      {
         // if ith value is j then we can have any value for small to j for i-1th max_element
         // we choose the one that requires the minumum cost

         mi = min(mi , dp[i-1][j]);
         dp[i][j] = mi + abs(a[i] - j);
      }
   }
   // if we made the n-1th element equal to j we require dp[n-1][j] operation
   // we choose the minimum anoung all the possible dp[n-1][j];

   int ans = 1e9+5;
   for(int j=0 ; j<=mx ; j++)
      ans = min(ans , dp[n-1][j]);

   cout<<ans;
   

}